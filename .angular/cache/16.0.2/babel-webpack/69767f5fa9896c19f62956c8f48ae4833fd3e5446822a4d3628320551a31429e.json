{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/authService.service\";\nimport * as i2 from \"@angular/router\";\nclass LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.username = '';\n    this.password = '';\n    this.errorMessage = '';\n  }\n  onLogin() {\n    this.authService.login(this.username, this.password).subscribe({\n      next: response => {\n        console.log('Login successful:', response);\n        // Navigate to appropriate route based on role\n        if (response.role === 'ADMIN') {\n          this.router.navigate(['/admin-dashboard']);\n        } else {\n          this.router.navigate(['/user-dashboard']);\n        }\n      },\n      error: error => {\n        this.errorMessage = 'Invalid username or password';\n        console.error('Login failed', error);\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 0,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"login works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".login-form[_ngcontent-%COMP%] {\\n    width: 300px;\\n    margin: 100px auto;\\n  }\\n  \\n  .error[_ngcontent-%COMP%] {\\n    color: red;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxVQUFVO0VBQ1oiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4tZm9ybSB7XG4gICAgd2lkdGg6IDMwMHB4O1xuICAgIG1hcmdpbjogMTAwcHggYXV0bztcbiAgfVxuICBcbiAgLmVycm9yIHtcbiAgICBjb2xvcjogcmVkO1xuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { LoginComponent };","map":{"version":3,"names":["LoginComponent","constructor","authService","router","username","password","errorMessage","onLogin","login","subscribe","next","response","console","log","role","navigate","error","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/Users/sanyamlodha/Personal/Samta/code/demo-heroku/demo-heroku-ui/demo-heroku-ui/src/app/login/login.component.ts","/Users/sanyamlodha/Personal/Samta/code/demo-heroku/demo-heroku-ui/demo-heroku-ui/src/app/login/login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/authService.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  username: string = '';\n  password: string = '';\n  errorMessage: string = '';\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  onLogin() {\n    this.authService.login(this.username, this.password).subscribe({\n      next: (response) => {\n        console.log('Login successful:', response);\n        // Navigate to appropriate route based on role\n        if (response.role === 'ADMIN') {\n          this.router.navigate(['/admin-dashboard']);\n        } else {\n          this.router.navigate(['/user-dashboard']);\n        }\n      },\n      error: (error) => {\n        this.errorMessage = 'Invalid username or password';\n        console.error('Login failed', error);\n      }\n    });\n  }\n}\n","<p>login works!</p>\n"],"mappings":";;;AAIA,MAKaA,cAAc;EAKzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAJ5D,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,YAAY,GAAW,EAAE;EAE8C;EAEvEC,OAAOA,CAAA;IACL,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC,IAAI,CAACJ,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACI,SAAS,CAAC;MAC7DC,IAAI,EAAGC,QAAQ,IAAI;QACjBC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,QAAQ,CAAC;QAC1C;QACA,IAAIA,QAAQ,CAACG,IAAI,KAAK,OAAO,EAAE;UAC7B,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;SAC3C,MAAM;UACL,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;;MAE7C,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACV,YAAY,GAAG,8BAA8B;QAClDM,OAAO,CAACI,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;KACD,CAAC;EACJ;;AAvBWhB,cAAc,C;mBAAdA,cAAc,EAAAiB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAdtB,cAAc,C;QAAdA,cAAc;EAAAuB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCT3BX,EAAA,CAAAa,cAAA,QAAG;MAAAb,EAAA,CAAAc,MAAA,mBAAY;MAAAd,EAAA,CAAAe,YAAA,EAAI;;;;;SDSNhC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet CreateUpdateMemberComponent = class CreateUpdateMemberComponent {\n  constructor(router, activatedRoute, familyMemberService) {\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.familyMemberService = familyMemberService;\n    // firstName: '';\n    // lastName: '';\n    // fatherName: '';\n    // memberType: '';\n    // gender: '';\n    // dateOfBirth: '';\n    //maritalStatusChk: string | undefined;\n    // bloodGroup: '';\n    // education: '';\n    // permanentAddress: '';\n    // mobile: '';\n    // email: '';\n    // area: '';\n    // checkedSameAddress: boolean = false;\n    // currentAddress: '';\n    // proffession: '';\n    // proffessionAddress: '';\n    // proffessionEmail: '';\n    // proffessionNumber: '';\n    // checkIAffirm: '';\n    // aborigine: '';\n    this.familyMember = {\n      familyHead: false,\n      firstName: '',\n      lastName: '',\n      fatherName: '',\n      gender: '',\n      dateOfBirth: '',\n      maritalStatus: '',\n      bloodGroup: '',\n      education: '',\n      permanentAddress: '',\n      mobile: '',\n      email: '',\n      area: '',\n      checkedSameAddress: false,\n      currentAddress: '',\n      profession: '',\n      professionAddress: '',\n      professionEmail: '',\n      professionNumber: '',\n      checkIAffirm: false,\n      aborigine: '',\n      status: 'Pending'\n    };\n    this.familyId = 0;\n    this.pageMode = '';\n  }\n  ngOnInit() {\n    this.memeberId = this.activatedRoute.snapshot.paramMap.get('id');\n    this.pageMode = this.activatedRoute.snapshot.paramMap.get('pageMode');\n    this.alreadyExistingFamilyHead = false;\n    this.alreadyExistingPhoneNumberForAnotherFamily = false;\n    this.familyMemberService.getFamilyByMemberId(this.memeberId).subscribe({\n      next: data => {\n        this.currentFamily = data;\n        this.familyId = data.familyId;\n        console.log(this.currentFamily);\n        this.alreadyExistingFamilyHead = this.checkForAlreadyExistingFamilyHead(data);\n      },\n      error: e => console.error(e)\n    });\n    if (this.pageMode === 'edit') {\n      this.familyMemberService.getMemberById(this.memeberId).subscribe({\n        next: data => {\n          this.familyMember = data;\n          console.log(data);\n        },\n        error: e => console.error(e)\n      });\n    }\n    this.familyMemberService.getAll().subscribe({\n      next: data => {\n        this.allFamilyMembers = data;\n      },\n      error: e => console.error(e)\n    });\n  }\n  onSave() {\n    this.familyMemberService.create(this.familyMember, this.familyId).subscribe({\n      next: res => {\n        console.log(res);\n        this.submitted = true;\n        this.backToSearchPage(res.memberId);\n      },\n      error: e => console.error(e)\n    });\n  }\n  backToSearchPage(memberId) {\n    if (memberId !== undefined && memberId !== null && memberId !== '' && memberId !== 0 && memberId !== \"0\") {\n      this.router.navigate(['/dashboard', {\n        id: memberId,\n        afterSaveOrUpdate: true\n      }]);\n    } else {\n      this.router.navigate(['/dashboard', {\n        afterSaveOrUpdate: false\n      }]);\n    }\n  }\n  onUpdate() {\n    this.familyMemberService.update(this.familyMember, this.familyId).subscribe({\n      next: res => {\n        console.log(res);\n        this.submitted = true;\n      },\n      error: e => console.error(e)\n    });\n  }\n  csvInputChange(fileInputEvent) {\n    console.log(fileInputEvent.target.files[0]);\n  }\n  goBack(id) {\n    this.router.navigate(['/family', id]);\n  }\n  checkForAlreadyExistingFamilyHead(data) {\n    const familyMembers = data.members;\n    for (var i = 0; i < familyMembers.length; i++) {\n      if (familyMembers[i].familyHead) {\n        return true;\n      }\n    }\n    return false;\n  }\n  checkMobileNumberErrors() {\n    this.alreadyExistingPhoneNumberForAnotherFamily = this.checkForAlreadyExistingPhoneNumberForAnotherFamily();\n  }\n  checkForAlreadyExistingPhoneNumberForAnotherFamily() {\n    const allmembers = this.allFamilyMembers;\n    const currentFamilyMembers = this.currentFamily.members;\n    var allowedPhNumbers;\n    if (currentFamilyMembers !== undefined && currentFamilyMembers.length > 0) {\n      for (let i = 0; i < currentFamilyMembers.length; i++) {\n        allowedPhNumbers[i] = currentFamilyMembers[i].mobile;\n      }\n      for (var i = 0; i < allmembers.length; i++) {\n        for (let j = 0; j < currentFamilyMembers.length; j++) {\n          if (allmembers[i].memberId !== currentFamilyMembers[j].memberId && allowedPhNumbers.includes(allmembers[i].mobile)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n};\nCreateUpdateMemberComponent = __decorate([Component({\n  selector: 'app-create-update-member',\n  templateUrl: './create-update-member.component.html',\n  styleUrls: ['./create-update-member.component.css']\n})], CreateUpdateMemberComponent);\nexport { CreateUpdateMemberComponent };","map":{"version":3,"names":["Component","CreateUpdateMemberComponent","constructor","router","activatedRoute","familyMemberService","familyMember","familyHead","firstName","lastName","fatherName","gender","dateOfBirth","maritalStatus","bloodGroup","education","permanentAddress","mobile","email","area","checkedSameAddress","currentAddress","profession","professionAddress","professionEmail","professionNumber","checkIAffirm","aborigine","status","familyId","pageMode","ngOnInit","memeberId","snapshot","paramMap","get","alreadyExistingFamilyHead","alreadyExistingPhoneNumberForAnotherFamily","getFamilyByMemberId","subscribe","next","data","currentFamily","console","log","checkForAlreadyExistingFamilyHead","error","e","getMemberById","getAll","allFamilyMembers","onSave","create","res","submitted","backToSearchPage","memberId","undefined","navigate","id","afterSaveOrUpdate","onUpdate","update","csvInputChange","fileInputEvent","target","files","goBack","familyMembers","members","i","length","checkMobileNumberErrors","checkForAlreadyExistingPhoneNumberForAnotherFamily","allmembers","currentFamilyMembers","allowedPhNumbers","j","includes","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/sanyamlodha/Personal/Samta/code/demo-heroku/demo-heroku-ui/demo-heroku-ui/src/app/create-update-member/create-update-member.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FamilyMember } from '../models/FamilyMember.model';\nimport { Member } from '../models/Member.model';\nimport { FamilyMemberService } from 'src/app/services/familyMember.service';\n\n@Component({\n  selector: 'app-create-update-member',\n  templateUrl: './create-update-member.component.html',\n  styleUrls: ['./create-update-member.component.css']\n})\nexport class CreateUpdateMemberComponent  implements OnInit{\n  // firstName: '';\n  // lastName: '';\n  // fatherName: '';\n  // memberType: '';\n  // gender: '';\n  // dateOfBirth: '';\n   //maritalStatusChk: string | undefined;\n  // bloodGroup: '';\n  // education: '';\n  // permanentAddress: '';\n  // mobile: '';\n  // email: '';\n  // area: '';\n  // checkedSameAddress: boolean = false;\n  // currentAddress: '';\n  // proffession: '';\n  // proffessionAddress: '';\n  // proffessionEmail: '';\n  // proffessionNumber: '';\n  // checkIAffirm: '';\n  // aborigine: '';\n\n  familyMember: Member = {\n    familyHead: false,\n    firstName: '',\n    lastName:  '',\n    fatherName: '',\n    gender: '',\n    dateOfBirth: '',\n    maritalStatus: '',\n    bloodGroup: '',\n    education: '',\n    permanentAddress: '',\n    mobile: '',\n    email: '',\n    area: '',\n    checkedSameAddress: false,\n    currentAddress: '',\n    profession: '',\n    professionAddress: '',\n    professionEmail: '',\n    professionNumber: '',\n    checkIAffirm: false,\n    aborigine: '',\n    status: 'Pending'\n  };\n\n  submitted!: Boolean;\n  familyId: any = 0;\n  memeberId: any;\n  pageMode: string = '';\n  alreadyExistingFamilyHead!: Boolean;\n  alreadyExistingPhoneNumberForAnotherFamily!: Boolean;\n  currentFamily!: FamilyMember;\n  allFamilyMembers: any;\n\n  constructor(private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private familyMemberService: FamilyMemberService\n  ) {}\n\n  ngOnInit(): void{\n    this.memeberId = this.activatedRoute.snapshot.paramMap.get('id')!;\n    this.pageMode = this.activatedRoute.snapshot.paramMap.get('pageMode')!;\n    this.alreadyExistingFamilyHead = false;\n    this.alreadyExistingPhoneNumberForAnotherFamily = false;\n    this.familyMemberService.getFamilyByMemberId(this.memeberId).subscribe({\n      next: (data) => {\n        this.currentFamily = data;\n        this.familyId = data.familyId;\n        console.log(this.currentFamily);\n        this.alreadyExistingFamilyHead = this.checkForAlreadyExistingFamilyHead(data);\n      },\n      error: (e) => console.error(e)\n    });\n    if(this.pageMode === 'edit'){\n      this.familyMemberService.getMemberById(this.memeberId).subscribe({\n        next: (data) => {\n          this.familyMember = data;\n          console.log(data);\n        },\n        error: (e) => console.error(e)\n      });\n    }\n\n    this.familyMemberService.getAll().subscribe({\n      next: (data) => {\n        this.allFamilyMembers = data;\n      },\n      error: (e) => console.error(e)\n    });\n\n  }\n\n  onSave(): void {\n    this.familyMemberService.create(this.familyMember, this.familyId).subscribe({\n      next: (res) => {\n        console.log(res);\n        this.submitted = true;\n        this.backToSearchPage(res.memberId);\n      },\n      error: (e) => console.error(e)\n    });\n  }\n\n  backToSearchPage(memberId: any){\n    if(memberId !== undefined && memberId !== null && memberId !== '' && memberId !== 0 && memberId !== \"0\"){\n      this.router.navigate(['/dashboard', {id: memberId, afterSaveOrUpdate: true}]);\n    }else {\n      this.router.navigate(['/dashboard', {afterSaveOrUpdate: false}]);\n    }\n  }\n\n  onUpdate(): void {\n    this.familyMemberService.update(this.familyMember, this.familyId).subscribe({\n      next: (res) => {\n        console.log(res);\n        this.submitted = true;\n      },\n      error: (e) => console.error(e)\n    });\n  }\n\n  csvInputChange(fileInputEvent: any) {\n    console.log(fileInputEvent.target.files[0]);\n  }\n  \n  goBack(id: string): void {\n    this.router.navigate(['/family', id]);\n  }\n\n  checkForAlreadyExistingFamilyHead(data: any): Boolean{\n    const familyMembers = data.members;\n    for(var i=0; i < familyMembers.length; i++){\n      if(familyMembers[i].familyHead){\n        return true;\n      }\n    }\n    return false;\n  }\n\n  checkMobileNumberErrors(){\n    this.alreadyExistingPhoneNumberForAnotherFamily = this.checkForAlreadyExistingPhoneNumberForAnotherFamily();\n  }\n\n  checkForAlreadyExistingPhoneNumberForAnotherFamily(): Boolean {\n    const allmembers = this.allFamilyMembers;\n    const currentFamilyMembers = this.currentFamily.members;\n    var allowedPhNumbers: any;\n    if(currentFamilyMembers !== undefined && currentFamilyMembers.length > 0){\n      for(let i=0; i<currentFamilyMembers.length; i++)\n      { \n        allowedPhNumbers[i] = currentFamilyMembers[i].mobile;\n      }\n      for(var i=0; i < allmembers.length; i++){\n        for(let j=0; j<currentFamilyMembers.length; j++){\n          if(allmembers[i].memberId !== currentFamilyMembers[j].memberId && allowedPhNumbers.includes(allmembers[i].mobile)){\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}